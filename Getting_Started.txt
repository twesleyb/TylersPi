################################################################################
## Installing Python on Windows 10.
################################################################################

# I followed the instructions [here](https://anthonydebarros.com/2018/06/21/setting-up-python-in-windows-10/).
# Python 3.7 32 bit was installed here: C:\Python37-32.
# This resulted in an error:
  Fatal Python error: initfsencoding: unable to load the file system codec ModuleNotFoundError: 
  No module named 'encodings' Current thread 0x000042dc (most recent call first):

# It was necessary to insure that Windows can find Python in its system path.
# To fix this, I followed these [instructions](https://stackoverflow.com/questions/42512817/fatal-python-error-on-windows-10-modulenotfounderror-no-module-named-encodings).

# Pip seems to have not been installed correctly. To fix this, follow these
# instructions: https://www.liquidweb.com/kb/install-pip-windows/. 
# * download pip by right clicking on link and saving in downloads.
# * change directory to download cd Downloads
# * python get-pip.py
# Check pip version with pip -V

# To install a package type:
pip install requests

# To unistall a module type:
pip uninstall name_of_module

# To upgrade a package type:
pip install --upgrade name_of_module

# To list installed modules
pip list

################################################################################
## Installing the Anaconda/Miniconda/Spyder IDE on Windows 10.
################################################################################

## Manually install all spyder dependencies with pip.
# pip install spyder_requirements.txt 
# Install spyder with pip
# launch from cmd with spyder3

################################################################################
## Installying Jupyter notebook.
################################################################################

# Install:
conda install ipython-notebook
conda install -c anaconda jupyter

# To run R code we need the Rkernel.
[link](https://discuss.analyticsvidhya.com/t/how-to-run-r-on-jupyter-ipython-notebooks/5512/2)
conda install -c r ipython-notebook r-irkernel
r
install.packes("rzmq")
install.packages("repr")
install.packages("IRkernel")
install.packages("IRdisplay")
IRkernel::installspec()
quit()

# Launch a notebook
ipython notebook
# or
jupyter-notebook

################################################################################
## Installing Git on Windows 10.
################################################################################

# Installed git bash.
# Navigate to where the git.ext
path = "C:\Program Files\Git\bin"
# Check that this is the correct path. In a new terminal:
cd C:\Program Files\Git\bin
git
# Should work.
# Add this path to Windows path system variables. 

################################################################################
## Setting up the Raspberry Pi.
################################################################################

# Hardware:
* Raspberry Pi 3 B: https://www.amazon.com/gp/product/B07BDR5PDW/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1
* SanDisk micro SD: https://www.amazon.com/gp/product/B073JWXGNT/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1
* Arducam camera for the Raspberry Pi: https://www.amazon.com/gp/product/B012V1HEP4/ref=ppx_yo_dt_b_asin_title_o00_s00?ie=UTF8&psc=1
* You will also need a USB keyboard, USB mouse, HDMI monitor, and a micro USB power supply.
* I connected my Pi with a 5.0V 100mA microA charger. The Pi's documentation says 
    that the Pi requires 5.1V and >700mA. So, I may have been providing 
    insufficient power.
    Pi power supply: https://www.raspberrypi.org/documentation/hardware/raspberrypi/power/README.md

# To set up a Raspberry Pi 3 (Model B), I followed the instructions (here)
# [https://www.imore.com/how-get-started-using-raspberry-pi].

# Brifly, I:
# 1). Reformated a SD card with the (SD Formatter 5.01)
[https://www.sdcard.org/downloads/formatter/index.html]. 

# 2). Downloaded (NOOBS)[https://www.raspberrypi.org/downloads/noobs/]

# 3). Unzipped this folder into my SD card and inserted into my Pi.

# 4). Connected Pi to Duke ethernet, micro USB power, USB keyboard and mouse, 
#     HDMI monitor, turned it on, and followed the prompts to install 
#     NOOBS. I kept the default username and password:
#       User: raspberry
#       Pass: pi

################################################################################
## Installing Python 3 on the Raspberry Pi.
################################################################################


# Follow the directions:
# https://www.ramoonus.nl/2018/06/30/installing-python-3-7-on-raspberry-pi


################################################################################
## Connecting the Raspberry Pi's camera.
################################################################################

# Arducam 5 Megapixel camera for Raspberry Pi 3 [X00VGJ8BL]
# http://www.arducam.com/lowcost-raspberry-pi-mini-camera-module/

# This paper is a model: https://github.com/surjeets/Animal_Home_Cage

# I followed the instructions here to connect the Raspberry Pi camera:
# [https://projects.raspberrypi.org/en/projects/getting-started-with-picamera]

# Configuration > Preferences > Raspberry Pi Configuration > Interfaces 
# > enable Camera and SSH.

# Make a simple script to activate camera for given amount of time:

```
from picamera import PiCamera
from time import sleep

camera = PiCamera()

camera.start_preview()
sleep(10)
camera.stop_preview() 
``

################################################################################
## Connecting to Pi remotely with VNC.
################################################################################

# VNC = virtual network computing. 

# I followed the instructions here to set up VNC:
  [https://lifehacker.com/how-to-control-your-raspberry-pi-from-any-computer-usin-1788592777]

# Briefly, I:
# 1). Downloaded the (Raspberry Pi Finder)[https://lifehacker.com/how-to-control-your-raspberry-pi-from-any-computer-usin-1788592777]
# 2). Downloaded the (RealVNC tool)[https://www.realvnc.com/en/connect/download/viewer/]
# 3). Insure VNC is enabled on Pi, and then with PC and Pi connected to Wifi
#     run the Pi finder tool on my PC. Activate VNC with command linne: vncserver
# 4). Connect to Pi with VNC by enter the Pi's IP address in VNC.

# Once connected to the Raspberry pi with VNC you can operate the Raspberry pi
# with or without (headless) a monitor.

# initialize VNC server on Pi:
vncserver

################################################################################
## Setting up Git for Raspberry Pi.
################################################################################

# Basic linux commands: https://www.raspberrypi.org/documentation/linux/usage/commands.md

# Working from instructions (here)[https://projects.raspberrypi.org/en/projects/getting-started-with-git]
# Git is already installed on Pi!

# Insure that a SSH key has been set up:
# 1) I followed the instructions here: https://www.raspberrypi.org/documentation/remote-access/ssh/passwordless.md
#    saved SSH key in default location with no pashphrase.
# 2) Add this SSH key to GitHub. Paste entire key. >Account > Settings > SSH > paste in entire key. 
# 3) Create a repository on GitHub. I was unable to create one remotely.
# 4) Clone this repository:
```
git clone git@github.com:twesleyb/newTest.git
```

```
# Commands to check SSH key.
$ ls ~/.ssh
$ cat ~/.ssh/id_rsa.pub

# Basic git commands:
$ git add --all
$ git status
$ git commit -am "commit message"
$ git push
$ git pull
$ 

# Password is my Duke netid.

################################################################################
## Basic Windows terminal commands.
################################################################################
# https://community.sophos.com/kb/en-us/13195
# also here: https://commandwindows.com/command3.htm
del
dir
cd
attrib
echo
cls
edit 
help
md

# To create a blank file.
echo >> newfile.txt

# Remove a directory.
rmdir <dirname>
# If the directory is not empty, use:
rmdir /s <dirname>

# Delete a file
del <filename.ext>

# You can chain commands together with the & operator.
# e.g. d: & echo >> test.txt

# List available packages.
pip list

# Save packages to requirements.txt.
pip freeze --local >requirements.txt


################################################################################
## Making a virtual environment (Python). 
################################################################################

# For virtual environment-like setup with R, see the Packrat package:
# http://rstudio.github.io/packrat/walkthrough.html

# This is a way of seperating different python environments for different projects.
# This environment is isolated. That way an upgrade to a global package will not 
# affect this virtual environemnt. 
 
# Install virtualenv
pip install virtualenv

# Create with:
virtualenv <my_virtual_env>

# Activate by navigating to Scripts folder and running activate. 
\path\to\env\Scripts\activate

# deactivate with deactivate from any directory
deactivate

# Remove by just deleting the directory.
rmdir /s <my_env>

# Some instructions for setting up virtual env through WLS: http://timmyreilly.azurewebsites.net/python-with-ubuntu-on-windows/
# Add jasper lib: https://stackoverflow.com/questions/43484357/opencv-in-ubuntu-17-04

# On the Raspberry pi.
# create virtual env.
# Navigate to its directory.
# Activate with source bin/activate

################################################################################
## Using gdrive to upload files. 
################################################################################
# Instructions: https://olivermarshall.net/how-to-upload-a-file-to-google-drive-from-the-command-line/

# Download appropriate gdrive version.
# Move to a directory where you want gdrive. 
# I used c:/Windows/gdrive 
# navigate to this directory and enter the following command:
$ gdrive-windows-x64.exe list.
# Go to the provided url and get the passkey.

# Be in the gdrive directory.
C:\Windows\gdrive

# Upload a file with:
gdrive-windows-x64.exe upload c:\Users\tyler\Downloads\youtube.bat

# Simplify the gdrive-windows-x64.exe executable filename to gdrive.exe.
# Add gdrive to windows path. 

# you can now upload from any directory!

# Basic commands:
gdrive list
gdrive list > list.txt
gdrive upload filename.ext
gdrive download 1UNaClNYA6O3nRIas8wR0um3A4drjVoEr
gdrive delete 1UNaClNYA6O3nRIas8wR0um3A4drjVoEr

## gdrive on the Raspberry Pi. 
# Download gdrive for Raspberry Pi.
# Put file in desired location.
# Make it executable:
sudo chmod +x gdrive-linux-rpi
# Execute a command.
./ gdrive-linux-rpi list
# Open the link, log into your google account, paste the password into the terminal.

# You can change the name of the executable file to something simpler, gdrive.
# Add gdrive to your path: https://opensource.com/article/17/6/set-path-linux 
# e.g.:
$ export PATH=$PATH:/home/pi/Documents/gdrive

# In order for this setting to be saved, you need to modify the .bashrc file.
sudo nano /home/pi/.bashrc
# Append the following to the bottom. You can use # to comment.
export PATH=$PATH:/home/pi/Documents/gdrive
# Save. gdrive is now in the system path. 

# The .gdrive configuration file is located at: C:\Users\tyler\AppData\Roaming\.gdrive

################################################################################
## Basic Raspberry Pi (Linux) terminal commands. 
################################################################################

# Resart
sudo reboot

# Turn off
sudo halt

# update and upgrade
sudo apt-get update
sudo apt-get upgrade

# Check if camera is connected:
vcgencmd get_camera

# Take a test picture.
raspistill -v -o test.jpg

# Raspberry Pi configuration.
sudo raspi-config

# To remove a package.
sudo pip unistall <package>

# To manually remove a package
sudo rm -rf /usr/local/lib/python2.7/dist-packages/<package>

# Delete a file.
rm filename

# Hidden files.
# files with a '.' are hidden. e.g. `.ssh` is hidden from view.
# to see hidden files:
ls -a

# To open a file.
xdg-open <filename>

# Wifi
# Set up the wifi under sudo raspi-config > Network Options > N2 Wi - fi
# Download the Duke Blue network application here: https://dukeblue.duke.edu/
$ cd Downloads
# Make the .run file executable. 
$ chmod +x SecureW2_JoinNow.run
$ ./SecureW2_JoinNow.run
# Enter credentials. Use netid (065..)

# Mac address.
ls /sys/class/net/


################################################################################
## Basic Pyton
################################################################################

# Get the working directory. 
import os
os.getcwd()

dir = 'd:'
os.chdir(dir)

os.listdir(dir)

# Check the type of an object with type()
type(dir)

# Read a text file.
file = 'test.txt'
lines = open(file).read().split('\n')

# Lists are created with []
# Index with [:]
# note thate indexing starts at 0.

# Generate a sequence of numbers with range().
range(0,5,1)

# Coerce to list.
list(range(0,5))

# Tuples are immutable. You cannot change them.  
# Created with ()

# Check if a value is in a list. 
x = range(1,100)
0 in x # FALSE

# an if statement. Use 4 spaces for to indicate blocks of code. 
if var1 < var2:
    print('yep!')
else:
    print('no!')

# Simple for loop.
for i in (range(5):
    print(i)

# Skeleton of function definition

def <function name>(<input arguments as keyword-value pairs>):
    # Code of function
    ...

    # Optional output of function
    return <output>

## Get all current functions.
import gc
vars = locals
for i in range(len(vars)):
    print(type(vars[i]))

################################################################################
## Using Atom as an IDE.
################################################################################
Some instructions: https://pythonhow.com/using-atom-as-a-python-editor/

# Use safe mode to debug issues.
# Enter safe mode from the terminal.
$ atom --safe
# You can then add packages and try to reproduce the problem.
# Exit safe mode:
$ atom --clear-window-state

# Open a file with atom from the terminal, simply:
$ atom filename.ext

################################################################################
## Add VLC to Windows command terminal.
################################################################################

# Need to add vlc.exe to the Window's path. 
# My  path was: C:\Program Files (x86)\VideoLAN\VLC\
# You can now open media files with the command:
$ vlc filename.ext

################################################################################
## Modifying playback speed with VLC (VLC playback).
################################################################################

# They FPS speed can be changed for playback in VLC.
Click the "Media" menu in VLC. Choose "Convert/Save" to display the "Open Media" 
    dialog box.
Click "Add" to display a file dialog box. Navigate to the file with the frame 
    rate that you want to change. Double-click to load it into the "File Selection" list.
Click the "Convert/Save" drop-down menu and choose "Convert."
Click "Edit," which has an icon that looks like a wrench and screwdriver. 
    The "Form" dialog box appears.
Click the "Video Codec" tab. Put a check mark by "Keep Original Video Track," 
    if you want to keep the original sound. Choose "1" from the "Scale" drop-down 
    menu to keep the original frame size.
Enter a new frame rate in the "Frame Rate" box. A typical rate is 30 frames per 
    second. Enter a bitrate such as 100 kilobytes per second. Click "Save" to 
    return to the "Convert" dialog.
Click "Browse" to specify a location and a file name for the converted file. 
    Choose the file type for the converted file in the "Profile" drop-down menu. 
    Click "Start" to convert the file.


################################################################################
## Creating an R package.
################################################################################
# roxygen format: https://kbroman.org/pkg_primer/pages/docs.html
# simple tutorial: https://hilaryparker.com/2014/04/29/writing-an-r-package-from-scratch/
# More on the roxygen format: http://r-pkgs.had.co.nz/man.html

library(devtools)
library(roxygen2)

devtools::create("package")

# Write r function with roxygen format. 
# Example: https://github.com/kbroman/pkg_primer/blob/gh-pages/example/stage3/R/plot_crayons.R

# Insure you are in the new packages directory.
devtools::document()

# Install the package.
install("cats")

# The package will now be in your library directory.
# To check where your pacakges are stored:
# Check where your packages are installed.
.libPaths()

# You can source the package like normal.
library("package")

# Once the package is on github, you can install it with devtools::install_github()
install_github("kbroman/broman") #username/package

################################################################################
## Running linux directly on Windows (Windows Linux Subsystem, WLS).
################################################################################
# Enable linux subsystem on windows.
# Cannot do this through the command line on W10. 
# Follow these instructions: https://www.laptopmag.com/articles/use-bash-shell-windows-10
# You will need to download a linux system now, open the windows store and get ubuntu.
# Search for ubuntu in the search bar. Ubuntu should automatically install in the
#   open command window. 

################################################################################
## Installing Rtools.
################################################################################
# Download the Rtools .ex.
# Important: insure the version you download is compatible with your current
# version of R. To check your R version, in R/Rstudio type:
R.version

# Follow the installation steps, accepting defaults. 
# Check that Rtools is installed: https://thecoatlessprofessor.com/programming/installing-rtools-for-compiled-code-via-rcpp/
> library(Rcpp)
> Rcpp::evalCpp("2+2")

################################################################################
## File encyrption (linux)
################################################################################
https://www.techrepublic.com/article/how-to-easily-encryptdecrypt-a-file-in-linux-with-gpg/
gpg -c important.docx
# Enter password. 
gpg important.dox.gpg
# Enter password.

# Specify the password in the command terminal.
#gpg -c --batch --passphrase 1234 -o 5sec.h264.gpg  5sec.h264

################################################################################
## Connecting the Raspberry Pi to an external hard drive.
################################################################################
# Instructions: https://www.makeuseof.com/tag/connect-hdd-raspberry-pi/
# Pi Documentation for automatic mounting: https://www.raspberrypi.org/documentation/configuration/external-storage.md

# My Seagate HDD is NTFS format. 
# The drive must either be reformatted for mounting onto the Pi OR
# ntfs-3g software must be installed so that the pi can read the drive.

sudo apt-get install ntfs-3g
sudo blkid > note.txt
xdg-open note.txt # UUID is 16 alphanumerical string.

sudo mkdir /mnt/mydisk
sudo chmod 770 /mnt/mydisk

# I used sda2 not sda1
#sudo mount -t ntfs-3g -o uid=1000,gid=1000,umask=007 /dev/sda2 /mnt/mydisk

# Note that in the following line:
UUID=44C661D2C661C530 /mnt/volume ntfs-3g uid=1000,gid=1000,nofail,umask=007 0 0
# volume is the name of the HDD! Change this to the directory you created in the previous steps.
# Otherwise your drive will just be named volume and you will have to unmout and start over
# if you want to change the name. 

# fstab:


################################################################################
## Google Drive-Cli
################################################################################

# Install with pip
pip install drive-cli

# Connect to google drive. 

################################################################################
## Creating space on the Raspberry pi.
################################################################################
# Instructions: https://www.raspberrypi-spy.co.uk/2018/03/free-space-raspberry-pi-sd-card/

# Check available space.
df -h

# Remove a package.
sudo apt-get purge -y package_name

################################################################################
## Camera set up for recording.
################################################################################

# Bottom of clamp (holding horizontal wooden rod): 18 inches from the bottom of the stand.
# Black clamp holding the pi: 15 inches to the right from where the metal stand meets the wooden rod
# Set up the cage to sit on the ring stand base (centered)

################################################################################
## Streaming video from the Raspberry Pi with VLC.
################################################################################
# Youtube: https://www.youtube.com/watch?v=JjPsW-7FUng
# Initiate camera stream:
raspivid -o - -t 0 -hf -w 800 -h 400 -fps 24 |cvlc -vvv stream:///dev/stdin --sout '#standard{access=http,mux=ts,dst=:8160}' :demux=h264

# Initiate stream on VLC from computer.
# Media > Open Network Stream > Enter URL: http://10.122.187.207:8160

# I created an executable script, vlc-stream and put this in home/pi/bin.
# I added this folder to my pi's path (.bashrc file).
# This is now executable from the termnial.

################################################################################
## Connecting to the Raspberry pi through PC's ethernet.
################################################################################
# youtube: https://youtu.be/AJ7skYS5bjI
# Enable ethernet sharing. 
> Control Panel\Network and Internet\Network and Sharing Center\Wi-Fi 
> Properties > Sharing > Enable allow other network users to connect through 
  this computer's internet connection

# Download Advanced IP Scanner: https://www.advanced-ip-scanner.com/
# Connect to Pi by wifi.
# Search for the Pi in the IP range given under the computers:
#  Ethernet > properties > Internet Protocol Version 4 (double click)
192.168.137.1 - 192.168.137.254

# Connect to the Pi with VNC using the IP address found by Advanced IP scanner.

# Note: at this point, the Pi is connected to the computer, but the Pi has no 
# internet access.

################################################################################
## Machine learning
################################################################################
# Coursera course on TensorFlow: https://www.coursera.org/learn/introduction-tensorflow
# Tutorial for video analysis:https://towardsdatascience.com/real-time-and-video-processing-object-detection-using-tensorflow-opencv-and-docker-2be1694726e5 
# More about convolutions: https://bit.ly/2UGa7uH

################################################################################
## Using the Vim editor.
################################################################################
# https://www.youtube.com/watch?v=ggSyF1SVFr4
# edit a file.
vim <filename.ext>

# The linux home directory 
cd $HOME/

# Your Vim configuration is stored in the .vimrc file.
# Find your vim file location with:
vim
:version
:echo $MYVIMRC

# The default mode is command mode. 
# Editor mode (insert) i
# Esc to exit

# Helpful commands. preceeded by 
u     # Undo
r     # redo
dd    # delete line
3dd   # delete 3 lines
:w    # Save

# Basic .vimrc file.
https://gist.github.com/simonista/8703722

################################################################################
## SSH to connect to Pi using WLS.
################################################################################

# Simple as, in the WLS Ubuntu Bash:
$ ssh pi@10.122.187.207

################################################################################
## Symlink your bash profile.
################################################################################

# Instructions: https://medium.freecodecamp.org/dive-into-dotfiles-part-2-6321b4a73608
# The gist:
$ mv ~/.bash_profile ~/Projects/dotfiles/.bash_profile
$ ln -sv ~/Projects/dotfiles/.bash_profile ~

################################################################################
## Installing opencv (cv2) on Raspberry Pi.
################################################################################
# In Python 3 virtual environment:
pip install opencv-python

# Other dependencies:
sudo apt-get install libcblas-dev
sudo apt-get install libhdf5-dev
sudo apt-get install libhdf5-serial-dev
sudo apt-get install libatlas-base-dev
sudo apt-get install libjasper-dev 
sudo apt-get install libqtgui4 
sudo apt-get install libqt4-test

################################################################################
## Raspi stream.
################################################################################

You can do many things (including start/stop recording) from the command line by writing to the FIFO queue. For example to start recording: (Note that your directory name may be different depending upon your installation)
Code: Select all

echo 'ca 1' > /var/www/FIFO
And to stop:
Code: Select all

echo 'ca 0' > /var/www/FIFO
While this command will capture 25 seconds of video and then stop:
Code: Select all

echo 'ca 1 25' > /var/www/FIFO
You can see a list of available commands by clicking on the 'Edit schedule settings' 
button, and then 'Command reference'.

################################################################################
## Linux: view file uid permissions, ownership:
################################################################################

# Use the command:
ls -l
ls -n

# Example output.
drwxr-xr-x 2 www-data www-data  4096 Apr 24 17:20 media
drwxr-xr-x 2 33 33  4096 Apr 25 11:35 media

# These fields are:
* file permissions,
* number of links,
* owner name,
* owner group,
* file size,
* time of last modification, and
* file/directory name

################################################################################
## SSH onto WLS.
################################################################################

# Instructions: https://www.illuminiastudios.com/dev-diaries/ssh-on-windows-subsystem-for-linux/
sudo apt remove openssh-server
sudo apt install openssh-server
# Edit config.
sudo vim /etc/ssh/sshd_config
# PasswordAuthentication = yes
# Add:
AllowUsers yourusername
# Check ssh status
service ssh status
sudo service ssh start
sudo service ssh --full-restart
sudo visudo
# Add
#%sudo ALL=NOPASSWD: /usr/sbin/sshd after %sudo  ALL=(ALL:ALL) ALL

# Set up a task scheduler to automatically start ssh server.

################################################################################
## Undo a big Git commit.
################################################################################

# From: https://stackoverflow.com/questions/20002557/how-to-remove-a-too-large-file-in-a-commit-when-my-branch-is-ahead-of-master-by

# If you have committed a file that is too large to push to git, you can undo 
# the commit with:

git reset HEAD^

# or 
git reset HEAD~n 

# Where n is the number of commits to undo.

# You can then remove the culprit file with:
git remove -- filename
