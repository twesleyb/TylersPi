#!/home/pi/Projects/Home-Cage-Behavior/git-ignore/python3/bin/python
# Executed within Python3 virtual environment.

# Code adapted from A Rosenbock.
# https://www.pyimagesearch.com/2016/02/22/writing-to-video-with-opencv/

# USAGE EXAMPLE:
# python fastpivideo.py --duration 10 --output example.avi

# HELP:
# python fastpivideo.py --help

#-------------------------------------------------------------------------------

# import the necessary packages:
from __future__ import print_function
from imutils.video import VideoStream
import numpy as np
import argparse
import imutils
import time
import cv2
import datetime as dt
import os

# Default output path is the cwd:
output = os.getcwd() + "/" + "pivideo" + ".avi" #.avi

# Parse the system arguments with argparse.
ap = argparse.ArgumentParser(description="""Record a threaded video for encreased
    framerate processing of the Raspberry Pi camera. Specify a desired duration
    (--duration) or use 'q' to stop the recording. The video will be saved in the
    current working directory unless specified otherwise (--output).""")
ap.add_argument("-d","--duration", type = int, default=np.inf,
    help="video duration; default = Inf")
ap.add_argument("-o", "--output", default=output,
    help="path to output video file; default = os.cwd")
ap.add_argument("-p", "--picamera", type=int, default=1,
    help="whether or not the Raspberry Pi camera should be used; default = True")
ap.add_argument("-f", "--fps", type=int, default=30,
    help="FPS of output video; default = 30")
ap.add_argument("-c", "--codec", type=str, default="h264",
    help="codec of output video; default = h264")
args = vars(ap.parse_args())

# Initialize the video stream and allow the camera
# sensor to warmup.
# The resolution can be customized, other viable values:
# 320x240 (default), 864x480 (~480p), 1280x720 (720p)
print("[INFO] warming up camera...")
vs = VideoStream(usePiCamera=args["picamera"] > 0,
                 resolution=(1280, 720)).start()
time.sleep(2.0)

# initialize the FourCC, video writer, dimensions of the frame, and
# zeros array
fourcc = cv2.VideoWriter_fourcc(*args["codec"])
writer = None
(h, w) = (None, None)
zeros = None

# Define video start time. 
start = dt.datetime.now()

# loop over frames from the video stream
duration = args["duration"]
while (dt.datetime.now() - start).seconds < duration:
    # grab the frame from the video stream and resize it to have a
    # maximum width of 300 pixels
    frame = vs.read()
    frame = imutils.resize(frame, width=600)

    # check if the writer is None
    if writer is None:
        # store the image dimensions, initialzie the video writer,
        # and construct the zeros array
        (h, w) = frame.shape[:2]
        writer = cv2.VideoWriter(args["output"], fourcc, args["fps"],
            (w, h), True)
        zeros = np.zeros((h, w), dtype="uint8")

    # break the image into its RGB components, then construct the
    # RGB representation of each frame individually
    #(B, G, R) = cv2.split(frame)
    #R = cv2.merge([zeros, zeros, R])
    #G = cv2.merge([zeros, G, zeros])
    #B = cv2.merge([B, zeros, zeros])

    # construct the final output frame, storing the original frame
    # at the top-left, the red channel in the top-right, the green
    # channel in the bottom-right, and the blue channel in the
    # bottom-left
    output = np.zeros((h, w, 3), dtype="uint8")
    output[0:h, 0:w] = frame
    #output[0:h, w:w * 2] = R
    #output[h:h * 2, w:w * 2] = G
    #output[h:h * 2, 0:w] = B

    # write the output frame to file
    writer.write(output)

    # show the frames
    #cv2.imshow("Frame", frame)
    cv2.imshow("Output", output)
    key = cv2.waitKey(1) & 0xFF

    # if the `q` key was pressed, break from the loop
    if key == ord("q"):
        break

# do a bit of cleanup
print("[INFO] cleaning up...")
cv2.destroyAllWindows()
vs.stop()
writer.release()

#-------------------------------------------------------------------------------